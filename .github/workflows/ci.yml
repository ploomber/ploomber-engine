name: CI

on: [push, pull_request]

jobs:
  unit-test:
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .

          # check package is importable
          python -c "import ploomber_engine"
          python -c "import ploomber_engine.client"
          python -c "import ploomber_engine.ipython"

          pip install ".[dev]"

      - name: Lint with flake8
        run: |
          flake8

      - name: Unit tests
        run: |
          pytest --ignore=tests/test_engine.py --durations-min=5

      - name: Unit tests (papermill)
        run: |
          pip install papermill ipykernel
          python -c "import ploomber_engine.engine"
          pytest tests/test_engine.py --durations-min=5

      - name: Doc tests
        run: |
          pytest src/ --doctest-modules


  readme-test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install jupyblog
        run: |
          pip install --upgrade pip
          pip install nbclient jupytext pkgmt ipykernel
          pip install .
      - name: Test readme
        run: |
          pkgmt test-md --file README.md


  # run: pkgmt check
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'pkgmt[check]'
      - name: Check project
        run: |
          pkgmt check

  release:
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' && startsWith(github.event.head_commit.message, '[release]')
    needs: [unit-test, readme-test, check]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'pkgmt[check]' twine wheel
      - name: Configure git
        run: |
          git config user.email "github-actions@ploomber.io"
          git config user.name "github-actions"
      - name: Bump up tag version 
        run: |
          pkgmt version --yes
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          TAG=$(git describe --abbrev=0)
          echo yes | pkgmt release $TAG --production
